---
- name: host > os family - distro - release - version
  command: >
    echo "{{ item }}"
  with_items:
    - "{{ ansible_os_family }} - {{ ansible_distribution }} - {{
      ansible_distribution_release }} - {{ ansible_distribution_major_version }}"
  changed_when: false

- name: run compatibility tests
  include_tasks: "compat.yml"

- name: include source vars
  include_vars: "source.yml"

- name: include os vars
  include_vars: "os/{{ ansible_distribution }}.yml"

- name: check current installation
  register: __current_apr_iconv
  shell: >
    {{ cmd_apr_iconv_version }}
  changed_when: false

- name: compare version with current one
  set_fact:
    __install_apr_iconv: "{% if __current_apr_iconv is failed %}false{% elif __current_apr_iconv.stdout == 'NaN'
      %}true{% else %}false{% endif %}"
    __upgrade_apr_iconv: "{% if __current_apr_iconv is failed %}false{% elif __current_apr_iconv.stdout == 'NaN'
      %}false{% else %}{{ __current_apr_iconv.stdout is version(apr_iconv_source_version, '<', strict=true)
      }}{% endif %}"

- name: force compile = {{ apr_iconv_force_compile }}
  set_fact:
    __install_apr_iconv: true
    __upgrade_apr_iconv: true
  when: apr_iconv_force_compile

- block:
    - name: include vars from apr
      include_role:
        name: apr
        vars_from: "source.yml"
        public: true

    - include_role:
        name: common
        tasks_from: package
      vars:
        packages_present: "{{ os_packages_present }}"
        packages_absent: "{{ os_packages_absent }}"
        update_cache: true
        dnf_via_shell: true
        print_list: true

    # # apr
    - include_role:
        name: common
        tasks_from: url-tgz
      vars:
        source: "{{ apr_source_name }}"
        source_src: "{{ apr_source_src }}"
        source_tgz: "{{ apr_source_tgz }}"
        source_dir: "{{ apr_source_dir }}"

    # apr-iconv
    - include_role:
        name: common
        tasks_from: url-tgz
      vars:
        source: "{{ apr_iconv_source_name }}"
        source_src: "{{ apr_iconv_source_src }}"
        source_tgz: "{{ apr_iconv_source_tgz }}"
        source_dir: "{{ apr_iconv_source_dir }}"

    - name: buildconf
      command: >
        ./buildconf \
          --with-apr="{{ apr_source_dir }}"
      args:
        chdir: "{{ apr_iconv_source_dir }}"

    - name: configure
      command: >
        ./configure \
          --prefix="{{ apr_iconv_target_dir }}" \
          --exec-prefix="{{ apr_iconv_target_dir }}" \
          --with-apr="{{ apr_target_exec }}"
      args:
        chdir: "{{ apr_iconv_source_dir }}"

    - name: compile
      make:
        chdir: "{{ apr_iconv_source_dir }}"

    - name: install
      make:
        chdir: "{{ apr_iconv_source_dir }}"
        target: install

    # shell only
    - name: linkig bin, lib
      shell: >
        ln -sf {{ apr_iconv_target_dir }}/bin/apriconv -T {{ os_bin_path }}/apriconv;
      args:
        warn: false

    - name: configure ldconfig file
      template:
        src: apr-iconv.j2
        dest: "{{ ldconfig_config_path }}/apr-iconv.conf"
        mode: 0644
        owner: root
        group: root

    - name: rebuild ldconfig cache
      shell: >
        rm -rf {{ ldconfig_cache_path }}; ldconfig
      args:
        warn: false
  when: __install_apr_iconv or __upgrade_apr_iconv

- name: clean-up
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ apr_source_dir }}"
    - "{{ apr_iconv_source_dir }}"

- name: validate version
  register: __validate_apr_iconv_version
  shell: >
    {{ cmd_apr_iconv_version }}
  changed_when: false

- name: validate libs
  register: __validate_apr_iconv_libs
  shell: >
    ldconfig -p | grep apr
  changed_when: false

- name: results
  command: >
    echo "{{ item }}"
  with_items:
    - "{{ apr_iconv_target_exec }} version is {{ __validate_apr_iconv_version.stdout }}"
    - "{{ __validate_apr_iconv_libs.stdout }}"
  changed_when: false
